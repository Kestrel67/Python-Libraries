import sys; sys.path.append('C:/Users/Lucas/Documents/Python/Libraries/Arithmetic')

from euclide import gcd
from inverse_modular import *
from math import log2

class RSA:

  PRIVATE = 2
  PUBLIC = 1
  # p, q    (belonging to Primes)
  # e       (GCD(e, p) = GCD(e, q) = 1)
  # n = p * q
  # d / e * d = 1 (mod (p - 1) * (q - 1))
  # public, private
  
  def __init__(self, p, q, e):
    if gcd(p, e) == 1 and gcd(q, e) == 1:
      (self.p, self.q, self.e) = (p, q, e)
      self.n = n = p * q
      self.d = d = modinv(e, (p - 1) * (q - 1))
      self.public = (e, n)
      self.private = (d, n)
    else:
      raise Exception('e doit Ãªtre premier avec p et q');

  def process(self, m, mode = PUBLIC):
    assert 1 < m < self.n - 1
    if mode == self.PUBLIC:
      return pow(m, *self.public)
    else:
      return pow(m, *self.private)

  def display(self):
    print("p = ", self.p)
    print("q = ", self.q)
    print("n = p * q = ", self.n)
    print("e = ", self.e)
    print("public = (", self.e, ", ", self.n, ")", sep = "")
    print("private = (", self.d, ", ", self.n, ")", sep = "")
  

if __name__ == "__main__":
  (a, b) = (32416190071, 32416189261)
  (a, b) = (1044388881413152506691752710716624382579964249047383780384233483283953907971557456848826811934997558340890106714439262837987573438185793607263236087851365277945956976543709998340361590134383718314428070011855946226376318839397712745672334684344586617496807908705803704071284048740118609114467977783598029006686938976881787785946905630190260940599579453432823469303026696443059025015972399867714215541693835559885291486318237914434496734087811872639496475100189041349008417061675093668333850551032972088269550769983616369411933015213796825837188091833656751221318492846368125550225998300412344784862595674492194617023806505913245610825731835380087608622102834270197698202313169017678006675195485079921636419370285375124784014907159135459982790513399611551794271106831134090584272884279791554849782954323534517065223269061394905987693002122963395687782878948440616007412945674919823050571642377154816321380631045902916136926708342856440730447899971901781465763473223850267253059899795996090799469201774624817718449867455659250178329070473119433165550807568221846571746373296884912819520317457002440926616910874148385078411929804522981857338977648103126085903001302413467189726673216491511131602920781738033436090243804708340403154192097, 1044388881413152506691752710716624382579964249047383780384233483283953907971557456848826811934997558340890106714439262837987573438185793607263236087851365277945956976543709998340361590134383718314428070011855946226376318839397712745672334684344586617496807908705803704071284048740118609114467977783598029006686938976881787785946905630190260940599579453432823469303026696443059025015972399867714215541693835559885291486318237914434496734087811872639496475100189041349008417061675093668333850551032972088269550769983616369411933015213796825837188091833656751221318492846368125550225998300412344784862595674492194617023806505913245610825731835380087608622102834270197698202313169017678006675195485079921636419370285375124784014907159135459982790513399611551794271106831134090584272884279791554849782954323534517065223269061394905987693002122963395687782878948440616007412945674919823050571642377154816321380631045902916136926708342856440730447899971901781465763473223850267253059899795996090799469201774624817718449867455659250178329070473119433165550807568221846571746373296884912819520317457002440926616910874148385078411929804522981857338977648103126085903001302413467189726673216491511131602920781738033436090243804708340403154197759)
  
  print('n : ', log2(a * b))
  rsa = RSA(a, b, 65537)

  l = rsa.process(892649629483698246923, rsa.PRIVATE)
  s = rsa.process(l, rsa.PUBLIC)
  print(s == 892649629483698246923)

  
